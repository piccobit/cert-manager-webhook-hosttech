apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cert-manager-webhook-hosttech.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "cert-manager-webhook-hosttech.name" . }}
    chart: {{ include "cert-manager-webhook-hosttech.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "cert-manager-webhook-hosttech.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "cert-manager-webhook-hosttech.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "cert-manager-webhook-hosttech.fullname" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.debug }}
          command:
            - dlv
          args:
            - --listen=:40000
            - --headless=true
            - --api-version=2
            - --accept-multiclient
            - exec
            - /usr/local/bin/webhook.debug
            - --
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
            - --secure-port={{ .Values.service.port }}
{{- else }}
          command:
            - webhook
          args:
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
            - --secure-port={{ .Values.service.port }}
{{- end }}
          env:
            - name: GROUP_NAME
              value: {{ .Values.groupName | quote }}
          ports:
            - containerPort: {{ .Values.service.port }}
              protocol: TCP
{{- if .Values.debug }}
            - containerPort: 40000
              protocol: TCP
{{- end }}
{{- if not .Values.debug }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: {{ .Values.service.port }}
{{- end }}
          volumeMounts:
            - name: certs
              mountPath: /tls
              readOnly: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.debug }}
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
{{- end }}
      volumes:
        - name: certs
          secret:
            secretName: {{ include "cert-manager-webhook-hosttech.servingCertificate" . }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
